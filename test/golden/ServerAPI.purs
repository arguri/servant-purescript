-- File auto generated by servant-purescript! --
module ServerAPI where

import Prelude

import Affjax.RequestHeader (RequestHeader(..))
import Data.Argonaut (Json, JsonDecodeError)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Array (catMaybes)
import Data.Either (Either(..))
import Data.Foldable (fold)
import Data.HTTP.Method (Method(..))
import Data.Maybe (Maybe(..))
import Data.Tuple (Tuple)
import Servant.PureScript (AjaxError, class MonadAjax, flagQueryPairs, paramListQueryPairs, paramQueryPairs, request, toHeader, toPathSegment)
import ServerTypes (Hello, TestHeader)
import URI (RelativePart(..), RelativeRef(..))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E

data Api = Api

getHello ::
  forall m.
  MonadAjax Api m =>
  Either (Tuple Int String) Hello ->
  Boolean ->
  Maybe String ->
  Array Hello ->
  m (Either (AjaxError JsonDecodeError Json) Hello)
getHello reqBody myFlag myParam myParams =
  request Api req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left GET
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Just reqBody
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = (E.either (E.tuple (E.value >/\< E.value)) E.value)
  decoder = D.value
  relativePart = RelativePartNoAuth $ Just
    [ "hello"
    ]
  query = Just $ fold
    [ flagQueryPairs "myFlag" myFlag
    , paramQueryPairs "myParam" myParam
    , paramListQueryPairs "myParams" myParams
    ]

getHelloByName ::
  forall m.
  MonadAjax Api m =>
  String ->
  m (Either (AjaxError JsonDecodeError Json) (Maybe Hello))
getHelloByName name =
  request Api req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left GET
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Nothing
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.null
  decoder = (D.maybe D.value)
  relativePart = RelativePartNoAuth $ Just
    [ "hello"
    , toPathSegment name
    ]
  query = Nothing

getTestHeader ::
  forall m.
  MonadAjax Api m =>
  Maybe TestHeader ->
  m (Either (AjaxError JsonDecodeError Json) TestHeader)
getTestHeader localHeader =
  request Api req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left GET
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [ RequestHeader "LocalHeader" <<< toHeader <$> localHeader
    ]
  content = Nothing
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.null
  decoder = D.value
  relativePart = RelativePartNoAuth $ Just
    [ "testHeader"
    ]
  query = Nothing

getBy ::
  forall m.
  MonadAjax Api m =>
  m (Either (AjaxError JsonDecodeError Json) Int)
getBy =
  request Api req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left GET
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Nothing
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.null
  decoder = D.value
  relativePart = RelativePartNoAuth $ Just
    [ "by"
    ]
  query = Nothing
